# Qdrant Neo4j Crawl4AI MCP Server Kubernetes Deployment
# Production-ready deployment with auto-scaling and monitoring

apiVersion: apps/v1
kind: Deployment
metadata:
  name: qdrant-neo4j-crawl4ai-mcp
  namespace: qdrant-neo4j-crawl4ai-mcp
  labels:
    app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: api-server
    app.kubernetes.io/part-of: qdrant-neo4j-crawl4ai-mcp-platform
    app.kubernetes.io/managed-by: kubernetes
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Main API server for Qdrant Neo4j Crawl4AI MCP Server"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
      app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
        app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: api-server
        app.kubernetes.io/part-of: qdrant-neo4j-crawl4ai-mcp-intelligence
        logging: promtail
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        co.elastic.logs/enabled: "true"
        co.elastic.logs/json.keys_under_root: "true"
        co.elastic.logs/json.add_error_key: "true"
    spec:
      serviceAccountName: qdrant-neo4j-crawl4ai-mcp
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      initContainers:
        # Wait for database dependencies
        - name: wait-for-qdrant
          image: busybox:1.36
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Qdrant to be ready..."
              until nc -z qdrant-service 6333; do
                echo "Qdrant not ready, sleeping..."
                sleep 2
              done
              echo "Qdrant is ready!"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
        
        - name: wait-for-neo4j
          image: busybox:1.36
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Neo4j to be ready..."
              until nc -z neo4j-service 7687; do
                echo "Neo4j not ready, sleeping..."
                sleep 2
              done
              echo "Neo4j is ready!"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
        
        - name: wait-for-redis
          image: busybox:1.36
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Redis to be ready..."
              until nc -z redis-service 6379; do
                echo "Redis not ready, sleeping..."
                sleep 2
              done
              echo "Redis is ready!"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      
      containers:
        - name: qdrant-neo4j-crawl4ai-mcp
          image: ghcr.io/your-username/qdrant-neo4j-crawl4ai-mcp:latest
          imagePullPolicy: Always
          
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          env:
            # Application configuration
            - name: ENVIRONMENT
              value: "production"
            - name: HOST
              value: "0.0.0.0"
            - name: PORT
              value: "8000"
            - name: LOG_LEVEL
              value: "INFO"
            - name: DEBUG
              value: "false"
            - name: WORKERS
              value: "4"
            
            # Kubernetes-specific
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            
            # Service configuration
            - name: DEFAULT_COLLECTION
              value: "qdrant_neo4j_crawl4ai_intelligence"
            - name: DEFAULT_EMBEDDING_MODEL
              value: "sentence-transformers/all-MiniLM-L6-v2"
            - name: CRAWL4AI_MAX_CONCURRENT
              value: "10"
            - name: CRAWL4AI_REQUEST_TIMEOUT
              value: "60"
            
            # Security configuration
            - name: ENABLE_SWAGGER_UI
              value: "false"
            - name: ENABLE_REDOC
              value: "false"
            - name: ENABLE_PROMETHEUS
              value: "true"
            - name: ENABLE_CORS
              value: "true"
            - name: JWT_ALGORITHM
              value: "HS256"
            - name: JWT_EXPIRE_MINUTES
              value: "60"
            
            # Database connections
            - name: QDRANT_URL
              value: "http://qdrant-service:6333"
            - name: NEO4J_URI
              value: "bolt://neo4j-service:7687"
            - name: NEO4J_USER
              value: "neo4j"
            - name: NEO4J_DATABASE
              value: "neo4j"
            - name: REDIS_URL
              value: "redis://redis-service:6379/0"
            
            # Tracing configuration
            - name: JAEGER_AGENT_HOST
              value: "jaeger-agent"
            - name: JAEGER_AGENT_PORT
              value: "6831"
            - name: JAEGER_SAMPLER_TYPE
              value: "const"
            - name: JAEGER_SAMPLER_PARAM
              value: "1"
          
          envFrom:
            - secretRef:
                name: qdrant-neo4j-crawl4ai-mcp-secrets
            - configMapRef:
                name: qdrant-neo4j-crawl4ai-mcp-config
          
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 1Gi
          
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
          
          startupProbe:
            httpGet:
              path: /startup
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
            - name: logs
              mountPath: /app/logs
            - name: config
              mountPath: /app/config
              readOnly: true
      
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: cache
          emptyDir:
            sizeLimit: 2Gi
        - name: logs
          emptyDir:
            sizeLimit: 1Gi
        - name: config
          configMap:
            name: qdrant-neo4j-crawl4ai-mcp-config
            defaultMode: 0644
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - qdrant-neo4j-crawl4ai-mcp
                topologyKey: kubernetes.io/hostname
      
      tolerations:
        - key: node.kubernetes.io/memory-pressure
          operator: Exists
          effect: NoSchedule
        - key: node.kubernetes.io/disk-pressure
          operator: Exists
          effect: NoSchedule
      
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
# Service for qdrant-neo4j-crawl4ai-mcp
apiVersion: v1
kind: Service
metadata:
  name: qdrant-neo4j-crawl4ai-mcp-service
  namespace: qdrant-neo4j-crawl4ai-mcp
  labels:
    app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/component: service
    app.kubernetes.io/part-of: qdrant-neo4j-crawl4ai-mcp-intelligence
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp
  ports:
    - name: http
      port: 8000
      targetPort: http
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: metrics
      protocol: TCP
  sessionAffinity: None
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qdrant-neo4j-crawl4ai-mcp
  namespace: qdrant-neo4j-crawl4ai-mcp
  labels:
    app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/component: service-account
automountServiceAccountToken: true
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: qdrant-neo4j-crawl4ai-mcp-hpa
  namespace: qdrant-neo4j-crawl4ai-mcp
  labels:
    app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: qdrant-neo4j-crawl4ai-mcp
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
    - type: Pods
      pods:
        metric:
          name: http_requests_per_second
        target:
          type: AverageValue
          averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 4
          periodSeconds: 60
      selectPolicy: Max
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qdrant-neo4j-crawl4ai-mcp-pdb
  namespace: qdrant-neo4j-crawl4ai-mcp
  labels:
    app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp
    app.kubernetes.io/component: pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: qdrant-neo4j-crawl4ai-mcp
      app.kubernetes.io/instance: qdrant-neo4j-crawl4ai-mcp