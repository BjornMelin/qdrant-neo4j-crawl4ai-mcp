# Production Environment Docker Compose
# Qdrant Neo4j Crawl4AI MCP Server - Production Setup
version: '3.8'

services:
  # Main application service with production optimizations
  qdrant-neo4j-crawl4ai-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    container_name: qdrant-neo4j-crawl4ai-mcp-prod
    ports:
      - "8000:8000"
    environment:
      # Application Configuration
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=4
      
      # Database Connections (using service names)
      - QDRANT_URL=http://qdrant:6333
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD_FILE=/run/secrets/neo4j_password
      - NEO4J_DATABASE=neo4j
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      
      # Security Configuration (production)
      - JWT_SECRET_KEY_FILE=/run/secrets/jwt_secret
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=60
      
      # Service Configuration
      - DEFAULT_COLLECTION=qdrant_neo4j_crawl4ai_intelligence
      - DEFAULT_EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - CRAWL4AI_MAX_CONCURRENT=10
      - CRAWL4AI_REQUEST_TIMEOUT=60
      
      # Production Features
      - ENABLE_SWAGGER_UI=false
      - ENABLE_REDOC=false
      - ENABLE_PROMETHEUS=true
      - ENABLE_CORS=true
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://yourdomain.com}
      
      # Monitoring and Observability
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      
    depends_on:
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    networks:
      - mcp-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    secrets:
      - jwt_secret
      - neo4j_password
      - sentry_dsn
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Qdrant Vector Database - Production Configuration
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: qdrant-prod
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__STORAGE__OPTIMIZERS__INDEXING_THRESHOLD=20000
      - QDRANT__STORAGE__OPTIMIZERS__MEMMAP_THRESHOLD=200000
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant/production.yaml:/qdrant/config/production.yaml
    networks:
      - mcp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Neo4j Graph Database - Production Configuration
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: neo4j-prod
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/changeme123
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=2g
      - NEO4J_dbms_memory_heap_max__size=4g
      - NEO4J_dbms_memory_pagecache_size=2g
      - NEO4J_dbms_tx_log_rotation_retention_policy=100M size
      - NEO4J_dbms_checkpoint_interval_time=15m
      - NEO4J_dbms_checkpoint_interval_tx=100000
      - NEO4J_metrics_enabled=true
      - NEO4J_metrics_jmx_enabled=true
      - NEO4J_metrics_prometheus_enabled=true
      - NEO4J_metrics_prometheus_endpoint=0.0.0.0:2004
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_conf:/conf
      - neo4j_plugins:/plugins
      - ./backups/neo4j:/backups
    networks:
      - mcp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 6G
        reservations:
          cpus: '1.0'
          memory: 3G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474/"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  # Redis Cache - Production Configuration
  redis:
    image: redis:7.2-alpine
    container_name: redis-prod
    ports:
      - "6379:6379"
    command: |
      sh -c '
        redis-server
        --appendonly yes
        --appendfsync everysec
        --auto-aof-rewrite-percentage 100
        --auto-aof-rewrite-min-size 64mb
        --maxmemory 1gb
        --maxmemory-policy allkeys-lru
        --timeout 300
        --tcp-keepalive 60
        --save 900 1
        --save 300 10
        --save 60 10000
        --stop-writes-on-bgsave-error yes
        --rdbcompression yes
        --rdbchecksum yes
      '
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
    networks:
      - mcp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1.5G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Production Monitoring Stack
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.external-url=https://yourdomain.com/prometheus'
    volumes:
      - ./monitoring/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - mcp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_ALERTING_ENABLED=true
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.yourdomain.com:587
      - GF_SMTP_USER=noreply@yourdomain.com
      - GF_SMTP_PASSWORD_FILE=/run/secrets/smtp_password
      - GF_SERVER_ROOT_URL=https://yourdomain.com/grafana
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-clock-panel,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/alerting:/etc/grafana/provisioning/alerting
    networks:
      - mcp-network
    restart: unless-stopped
    secrets:
      - grafana_admin_password
      - smtp_password
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.4
    container_name: loki-prod
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-prod-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - mcp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail-prod
    volumes:
      - ./monitoring/promtail/promtail-prod-config.yaml:/etc/promtail/config.yml
      - ./logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger-prod
    ports:
      - "16686:16686"
      - "14268:14268"
      - "6831:6831/udp"
      - "6832:6832/udp"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
      - QUERY_BASE_PATH=/jaeger
    volumes:
      - jaeger_data:/badger
    networks:
      - mcp-network
    restart: unless-stopped
    deploy:
      - resources:
          limits:
            cpus: '0.5'
            memory: 1G
          reservations:
            cpus: '0.25'
            memory: 512M

  # nginx reverse proxy and load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/certs:/etc/letsencrypt
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - qdrant-neo4j-crawl4ai-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Backup service for data persistence
  backup:
    image: alpine:3.18
    container_name: backup-service
    volumes:
      - qdrant_data:/backup/qdrant:ro
      - neo4j_data:/backup/neo4j:ro
      - redis_data:/backup/redis:ro
      - grafana_data:/backup/grafana:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - mcp-network
    restart: "no"
    deploy:
      replicas: 0
    command: |
      sh -c '
        apk add --no-cache curl postgresql-client redis
        chmod +x /backup.sh
        crond -f
      '

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: mcp-prod

volumes:
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mcp/qdrant
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mcp/neo4j/data
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mcp/neo4j/logs
  neo4j_conf:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mcp/redis
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mcp/grafana
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mcp/prometheus
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mcp/loki
  jaeger_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mcp/jaeger

secrets:
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  neo4j_password:
    file: ./secrets/neo4j_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
  smtp_password:
    file: ./secrets/smtp_password.txt
  sentry_dsn:
    file: ./secrets/sentry_dsn.txt