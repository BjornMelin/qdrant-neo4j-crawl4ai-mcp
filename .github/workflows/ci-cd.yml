# Comprehensive CI/CD Pipeline for Qdrant Neo4j Web MCP Server
# Production-ready pipeline with quality gates, security scanning, and automated deployment

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev,test]"

      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Run pre-commit hooks
        run: |
          source .venv/bin/activate
          pre-commit run --all-files

      - name: Lint with Ruff
        run: |
          source .venv/bin/activate
          ruff check . --output-format=github
          ruff format . --check

      - name: Type check with MyPy
        run: |
          source .venv/bin/activate
          mypy src/ --strict

      - name: Security check with Bandit
        run: |
          source .venv/bin/activate
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt

      - name: Dependency security check
        run: |
          source .venv/bin/activate
          safety check --json --output safety-report.json
          safety check

      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date +%Y%m%d)-${GITHUB_SHA::8}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        test-type: [unit, integration, security, property]
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev,test]"

      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run tests
        run: |
          source .venv/bin/activate
          case "${{ matrix.test-type }}" in
            unit)
              pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
              ;;
            integration)
              pytest tests/integration/ -v --timeout=300
              ;;
            security)
              pytest tests/security/ -v -m security
              ;;
            property)
              pytest tests/property/ -v -m property --timeout=600
              ;;
          esac

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Stop test services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            htmlcov/
            coverage.xml
            pytest-report.xml

  # Performance and Load Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev,test]"

      - name: Start services for performance testing
        run: |
          docker-compose up -d
          sleep 60

      - name: Run performance tests
        run: |
          source .venv/bin/activate
          pytest tests/performance/ -v --timeout=1200 --benchmark-json=benchmark.json

      - name: Load test with Artillery
        run: |
          npm install -g artillery
          artillery run tests/load/artillery-config.yml --output load-test-report.json

      - name: Stop services
        if: always()
        run: docker-compose down -v

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: |
            benchmark.json
            load-test-report.json

  # Docker Build and Security Scan
  build:
    name: Build and Scan
    runs-on: ubuntu-latest
    needs: quality
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.quality.outputs.version }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ needs.quality.outputs.version }}
            VCS_REF=${{ github.sha }}

      - name: Set image output
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.quality.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Container Security Scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
            ${{ steps.image.outputs.image }}

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: staging
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway Staging
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ needs.build.outputs.image }}",
              "environment": "staging",
              "variables": {
                "ENVIRONMENT": "staging",
                "LOG_LEVEL": "INFO"
              }
            }' \
            https://api.railway.app/v1/deployments

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          curl -f ${{ secrets.STAGING_URL }}/health
          curl -f ${{ secrets.STAGING_URL }}/ready

      - name: Run smoke tests
        run: |
          npm install -g artillery
          artillery quick --count 10 --num 2 ${{ secrets.STAGING_URL }}/health

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Deploy to production',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Deploy to Railway Production
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ needs.build.outputs.image }}",
              "environment": "production",
              "variables": {
                "ENVIRONMENT": "production",
                "LOG_LEVEL": "INFO",
                "WORKERS": "4"
              }
            }' \
            https://api.railway.app/v1/deployments

      - name: Deploy to Fly.io Production
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.FLY_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ needs.build.outputs.image }}",
              "config": {
                "app": "${{ secrets.FLY_APP_NAME }}",
                "env": {
                  "ENVIRONMENT": "production",
                  "LOG_LEVEL": "INFO"
                }
              }
            }' \
            https://api.machines.dev/v1/apps/${{ secrets.FLY_APP_NAME }}/machines

      - name: Wait for deployment
        run: sleep 120

      - name: Health check
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/health
          curl -f ${{ secrets.PRODUCTION_URL }}/ready
          curl -f ${{ secrets.PRODUCTION_URL }}/metrics

      - name: Run production smoke tests
        run: |
          npm install -g artillery
          artillery quick --count 20 --num 5 ${{ secrets.PRODUCTION_URL }}/health

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const deployment_id = ${{ steps.deployment.outputs.result }};
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment_id,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              description: '${{ job.status }}' === 'success' ? 'Deployment successful' : 'Deployment failed',
              environment_url: '${{ secrets.PRODUCTION_URL }}'
            });

  # Monitoring and Alerting Setup
  setup-monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Grafana dashboards
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/grafana/dashboards/qdrant-neo4j-crawl4ai-mcp-overview.json \
            ${{ secrets.GRAFANA_URL }}/api/dashboards/db

      - name: Setup Sentry release
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ needs.quality.outputs.version }}",
              "projects": ["qdrant-neo4j-crawl4ai-mcp"]
            }' \
            https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/

      - name: Setup alerting rules
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/grafana/alerting/production-alerts.json \
            ${{ secrets.GRAFANA_URL }}/api/ruler/grafana/api/v1/rules/production

  # Cleanup and Notifications
  cleanup:
    name: Cleanup and Notify
    runs-on: ubuntu-latest
    needs: [quality, test, build, deploy-production]
    if: always()
    steps:
      - name: Cleanup old images
        if: github.ref == 'refs/heads/main'
        run: |
          # Keep only the last 10 images
          echo "Cleaning up old container images..."
          # Implementation would depend on registry API

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: 'GitHub Actions'
          icon_emoji: ':robot_face:'
          fields: |
            repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "Deployment ${{ job.status }}",
              "attachments": [{
                "color": "${{ job.status }}" === "success" ? "good" : "danger",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Version",
                  "value": "${{ needs.quality.outputs.version }}",
                  "short": true
                }, {
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release
        if: github.ref == 'refs/heads/main' && needs.deploy-production.result == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.quality.outputs.version }}
          release_name: Release v${{ needs.quality.outputs.version }}
          body: |
            ## Changes in this Release
            - Automated release from CI/CD pipeline
            - Version: ${{ needs.quality.outputs.version }}
            - Commit: ${{ github.sha }}
            
            ## Deployment Information
            - Deployed to production: ✅
            - Container image: ${{ needs.build.outputs.image }}
            - Health check: ✅
            
            ## Testing
            - Unit tests: ✅
            - Integration tests: ✅
            - Security scans: ✅
            - Performance tests: ✅
          draft: false
          prerelease: false