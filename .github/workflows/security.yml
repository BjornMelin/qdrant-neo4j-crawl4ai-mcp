# Security Scanning and Validation Workflow
# Comprehensive security pipeline for vulnerability detection and compliance

name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Static Application Security Testing (SAST)
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] semgrep safety

      - name: Run Bandit security analysis
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f sarif -o bandit-results.sarif

      - name: Upload Bandit SARIF results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif
          category: bandit

      - name: Run Semgrep security analysis
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/
          semgrep --config=auto --sarif --output=semgrep-results.sarif src/

      - name: Upload Semgrep SARIF results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

      - name: Check dependency vulnerabilities
        run: |
          safety check --json --output safety-report.json
          safety check --continue-on-error

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sast-reports
          path: |
            bandit-report.json
            bandit-results.sarif
            semgrep-report.json
            semgrep-results.sarif
            safety-report.json

  # CodeQL Analysis
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: qdrant-neo4j-crawl4ai-mcp:security-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'qdrant-neo4j-crawl4ai-mcp:security-test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy

      - name: Run Docker Scout vulnerability scan
        if: github.event_name != 'pull_request'
        run: |
          docker scout cves qdrant-neo4j-crawl4ai-mcp:security-test --format sarif --output docker-scout-results.sarif

      - name: Run Snyk container scan
        continue-on-error: true
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container test qdrant-neo4j-crawl4ai-mcp:security-test --json > snyk-container-report.json
          snyk container test qdrant-neo4j-crawl4ai-mcp:security-test

      - name: Upload container security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-reports
          path: |
            trivy-results.sarif
            docker-scout-results.sarif
            snyk-container-report.json

  # Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: checkov

      - name: Scan Docker Compose configurations
        run: |
          pip install docker-compose-validator
          docker-compose-validator docker-compose.yml
          docker-compose-validator docker-compose.prod.yml

      - name: Validate Kubernetes manifests (if present)
        run: |
          if [ -d "k8s/" ]; then
            pip install kubeval
            kubeval k8s/*.yaml
          fi

  # Dynamic Application Security Testing (DAST)
  dast:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Start application for DAST
        run: |
          # Start the application in the background
          export ENVIRONMENT=testing
          export DEBUG=false
          export REDIS_URL=redis://localhost:6379/0
          python -m qdrant_neo4j_crawl4ai_mcp.main &
          sleep 30

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run SQL injection tests
        run: |
          pip install sqlmap
          # Test common SQL injection points
          sqlmap -u "http://localhost:8000/api/v1/vector/search" \
            --data='{"query":"test","limit":5}' \
            --method=POST \
            --headers="Content-Type: application/json" \
            --batch --level=1 --risk=1

      - name: Run custom security tests
        run: |
          python -m pytest tests/security/ -v -m dast --timeout=300

      - name: Upload DAST reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dast-reports
          path: |
            report_html.html
            report_md.md
            report_json.json

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secrets scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Scan for hardcoded secrets
        run: |
          # Custom regex patterns for common secrets
          echo "Scanning for potential hardcoded secrets..."
          grep -r -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" src/ || true
          grep -r -E "-----BEGIN [A-Z ]+-----" . || true

  # License and Compliance Scanning
  license-compliance:
    name: License and Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          pip install pip-licenses

      - name: Check Python package licenses
        run: |
          pip-licenses --format=json --output-file=python-licenses.json
          pip-licenses --format=csv --output-file=python-licenses.csv
          pip-licenses

      - name: Scan for license compliance
        run: |
          # Check for GPL and other restrictive licenses
          pip-licenses | grep -i gpl && exit 1 || true
          echo "License compliance check passed"

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            python-licenses.json
            python-licenses.csv

  # Security Configuration Analysis
  security-config:
    name: Security Configuration Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze Docker security configuration
        run: |
          # Check for security best practices in Dockerfile
          echo "Analyzing Dockerfile security..."
          
          # Check for non-root user
          grep -q "USER" Dockerfile && echo "✅ Non-root user configured" || echo "❌ Running as root"
          
          # Check for COPY --chown usage
          grep -q "COPY --chown" Dockerfile && echo "✅ Proper file ownership" || echo "⚠️ File ownership not set"
          
          # Check for minimal base image
          grep -q "slim\|alpine\|distroless" Dockerfile && echo "✅ Minimal base image" || echo "⚠️ Consider using minimal base image"

      - name: Analyze security settings
        run: |
          echo "Analyzing security configuration..."
          
          # Check for security headers configuration
          find . -name "*.py" -exec grep -l "security.*header\|cors\|csrf" {} \; | wc -l
          
          # Check for authentication implementation
          find . -name "*.py" -exec grep -l "auth\|jwt\|token" {} \; | wc -l
          
          # Check for input validation
          find . -name "*.py" -exec grep -l "pydantic\|validator\|validation" {} \; | wc -l

  # Security Test Results Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, codeql, container-security, infrastructure-security, secrets-scan, license-compliance, security-config]
    if: always()
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          echo "- SAST: ${{ needs.sast.result }}" >> security-summary.md
          echo "- CodeQL: ${{ needs.codeql.result }}" >> security-summary.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> security-summary.md
          echo "- Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-summary.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "- License Compliance: ${{ needs.license-compliance.result }}" >> security-summary.md
          echo "- Security Configuration: ${{ needs.security-config.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # Count findings
          echo "## Findings Summary" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ -d "security-reports" ]; then
            total_files=$(find security-reports -type f | wc -l)
            echo "- Total security report files: $total_files" >> security-summary.md
            
            # Count SARIF files
            sarif_files=$(find security-reports -name "*.sarif" | wc -l)
            echo "- SARIF reports generated: $sarif_files" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Fail if critical security issues found
        run: |
          # This would analyze the reports and fail if critical issues are found
          echo "Checking for critical security issues..."
          
          # Example: Check for high/critical severity findings
          critical_found=false
          
          if [ -d "security-reports" ]; then
            # Check Bandit results
            if [ -f "security-reports/sast-reports/bandit-report.json" ]; then
              high_severity=$(jq '[.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL")] | length' security-reports/sast-reports/bandit-report.json 2>/dev/null || echo "0")
              if [ "$high_severity" -gt "0" ]; then
                echo "❌ Found $high_severity high/critical severity issues in Bandit scan"
                critical_found=true
              fi
            fi
          fi
          
          if [ "$critical_found" = true ]; then
            echo "❌ Critical security issues found. Please review and fix before proceeding."
            exit 1
          else
            echo "✅ No critical security issues found."
          fi